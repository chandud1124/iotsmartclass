import React, { useState } from 'react';
import { DeviceCard } from '@/components/DeviceCard';
import { Button } from '@/components/ui/button';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Plus } from 'lucide-react';
import { useDevices } from '@/hooks/useDevices';
import { useToast } from '@/hooks/use-toast';

interface NewSwitch {
  name: string;
  gpio: number;
  type: 'relay' | 'light' | 'fan' | 'outlet' | 'projector' | 'ac';
  state: boolean;
}

interface NewDevice {
  name: string;
  location: string;
  type: string;
  switches: NewSwitch[];
}

const Devices = () => {
  const { devices, toggleSwitch, updateDevice, deleteDevice, addDevice } = useDevices();
  const { toast } = useToast();
  const [showAddDialog, setShowAddDialog] = useState(false);
  const [newDevice, setNewDevice] = useState<NewDevice>({
    name: '',
    location: '',
    type: 'esp32',
    switches: [{
      name: 'Switch 1',
      gpio: 0,
      type: 'relay',
      state: false
    }]
  });

  const handleToggleSwitch = async (deviceId: string, switchId: string) => {
    try {
      await toggleSwitch(deviceId, switchId);
      toast({
        title: "Success",
        description: "Switch toggled successfully"
      });
    } catch (error) {
      toast({
        title: "Error",
        description: "Failed to toggle switch",
        variant: "destructive"
      });
    }
  };

  const handleUpdateDevice = async (deviceId: string, updates: any) => {
    try {
      await updateDevice(deviceId, updates);
      toast({
        title: "Success",
        description: "Device updated successfully"
      });
    } catch (error) {
      toast({
        title: "Error",
        description: "Failed to update device",
        variant: "destructive"
      });
    }
  };

  const handleAddDevice = async () => {
    try {
      if (!newDevice.name || !newDevice.location || newDevice.switches.length === 0) {
        toast({
          title: "Validation Error",
          description: "Please fill in all required fields",
          variant: "destructive"
        });
        return;
      }

      // Validate GPIO pins
      const gpios = newDevice.switches.map(s => s.gpio);
      if (new Set(gpios).size !== gpios.length) {
        toast({
          title: "Validation Error",
          description: "GPIO pins must be unique",
          variant: "destructive"
        });
        return;
      }

      await addDevice(newDevice);
      setShowAddDialog(false);
      setNewDevice({
        name: '',
        location: '',
        type: 'esp32',
        switches: [{
          name: 'Switch 1',
          gpio: 0,
          type: 'relay',
          state: false
        }]
      });
      toast({
        title: "Success",
        description: "Device added successfully"
      });
    } catch (error: any) {
      toast({
        title: "Error",
        description: error.response?.data?.message || "Failed to add device",
        variant: "destructive"
      });
    }
  };

  const addSwitch = () => {
    setNewDevice(prev => ({
      ...prev,
      switches: [
        ...prev.switches,
        {
          name: `Switch ${prev.switches.length + 1}`,
          gpio: prev.switches.length > 0 ? Math.max(...prev.switches.map(s => s.gpio)) + 1 : 0,
          type: 'relay',
          state: false
        }
      ]
    }));
  };

  const updateSwitch = (index: number, field: keyof NewSwitch, value: any) => {
    setNewDevice(prev => ({
      ...prev,
      switches: prev.switches.map((s, i) => 
        i === index ? { ...s, [field]: value } : s
      )
    }));
  };

  const removeSwitch = (index: number) => {
    setNewDevice(prev => ({
      ...prev,
      switches: prev.switches.filter((_, i) => i !== index)
    }));
  };

  return (
    <div className="container mx-auto py-6">
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-3xl font-bold">Devices</h1>
        <Button onClick={() => setShowAddDialog(true)}>
          <Plus className="w-4 h-4 mr-2" />
          Add Device
        </Button>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {devices.map((device) => (
          <DeviceCard
            key={device.id}
            device={device}
            onToggle={handleToggleSwitch}
            onUpdate={handleUpdateDevice}
            onDelete={deleteDevice}
          />
        ))}
      </div>

      <Dialog open={showAddDialog} onOpenChange={setShowAddDialog}>
        <DialogContent className="max-w-md">
          <DialogHeader>
            <DialogTitle>Add New Device</DialogTitle>
          </DialogHeader>

          <div className="space-y-4">
            <div>
              <Label htmlFor="device-name">Device Name</Label>
              <Input
                id="device-name"
                value={newDevice.name}
                onChange={(e) => setNewDevice({...newDevice, name: e.target.value})}
                placeholder="Living Room Controller"
              />
            </div>

            <div>
              <Label htmlFor="location">Location</Label>
              <Input
                id="location"
                value={newDevice.location}
                onChange={(e) => setNewDevice({...newDevice, location: e.target.value})}
                placeholder="Living Room"
              />
            </div>

            <div>
              <Label>Device Type</Label>
              <Select
                value={newDevice.type}
                onValueChange={(value) => setNewDevice({...newDevice, type: value})}
              >
                <SelectTrigger>
                  <SelectValue placeholder="Select type" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="esp32">ESP32</SelectItem>
                  <SelectItem value="esp8266">ESP8266</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div className="space-y-4">
              <div className="flex items-center justify-between">
                <Label>Switches</Label>
                <Button variant="outline" size="sm" onClick={addSwitch}>
                  Add Switch
                </Button>
              </div>

              {newDevice.switches.map((sw, index) => (
                <div key={index} className="space-y-2 p-4 border rounded-lg">
                  <div className="flex justify-between items-center">
                    <Label>Switch {index + 1}</Label>
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={() => removeSwitch(index)}
                      disabled={newDevice.switches.length === 1}
                    >
                      Remove
                    </Button>
                  </div>

                  <div className="space-y-2">
                    <Input
                      value={sw.name}
                      onChange={(e) => updateSwitch(index, 'name', e.target.value)}
                      placeholder="Switch name"
                    />

                    <div className="grid grid-cols-2 gap-2">
                      <div>
                        <Label>GPIO Pin</Label>
                        <Input
                          type="number"
                          min="0"
                          max="40"
                          value={sw.gpio}
                          onChange={(e) => updateSwitch(index, 'gpio', parseInt(e.target.value))}
                        />
                      </div>

                      <div>
                        <Label>Type</Label>
                        <Select
                          value={sw.type}
                          onValueChange={(value: NewSwitch['type']) => updateSwitch(index, 'type', value)}
                        >
                          <SelectTrigger>
                            <SelectValue />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="relay">Relay</SelectItem>
                            <SelectItem value="light">Light</SelectItem>
                            <SelectItem value="fan">Fan</SelectItem>
                            <SelectItem value="outlet">Outlet</SelectItem>
                            <SelectItem value="projector">Projector</SelectItem>
                            <SelectItem value="ac">AC</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>

          <div className="flex justify-end space-x-2">
            <Button variant="outline" onClick={() => setShowAddDialog(false)}>
              Cancel
            </Button>
            <Button onClick={handleAddDevice}>
              Add Device
            </Button>
          </div>
        </DialogContent>
      </Dialog>
    </div>
  );
};

export default Devices;
